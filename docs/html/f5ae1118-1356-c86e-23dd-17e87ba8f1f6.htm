<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Extensions Class</title><meta name="Title" content="Extensions" /><meta name="Help.Id" content="T:OptRes.Extensions" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="OptRes" /><meta name="guid" content="f5ae1118-1356-c86e-23dd-17e87ba8f1f6" /><meta name="Description" content="Extension methods for the Opt and Res types." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Extensions Class</h1><div class="summary">
            Extension methods for the Opt and Res types.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="9dbb6989-bdfb-5c0a-a52e-0d0ce2d4e01a.htm">OptRes</a><br /><strong>Assembly:</strong> OptRes (in OptRes.dll) Version: 6.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">Extensions</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Extensions</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDBEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="13aa80f2-4131-4f9f-bde0-3192412885e9.htm">Err(String)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res AddUser(User user)
{
    if (AlreadyExists(user))
        return Err($"user '{user.Id}' already exists.");
    if (HasAvailableCapacity(session))
        return Err("not enough capacity");
    else
    {
        // add user
        return Ok();
    }
}</code></pre></div></div></td></tr><tr><td><a href="3b0b805d-eb51-21cc-b56f-b275ffd20424.htm">Err(String, Exception)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">when</span>, <span class="parameter">exception</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res PutItem(Item item)
{
    try
    {
        PutItemToDatabase(item);
        return Ok();
    }
    catch (Exception e)
    {
        return Err(nameof(PutItem), e);
    }
}</code></pre></div></div></td></tr><tr><td><a href="9bae433b-7ef0-1e60-dcda-93e5c0e00742.htm">Err(String, String)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>, <span class="parameter">when</span>.
            </td></tr><tr><td><a href="7ca40a1f-23be-1691-3cb9-55f3f97fd4d7.htm">Err(String, String, Exception)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>, <span class="parameter">when</span>, <span class="parameter">exception</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res PutItem(Item item)
{
    try
    {
        PutItemToDatabase(item);
        return Ok();
    }
    catch (Exception e)
    {
        return Err("failed to execute sql command.", nameof(PutItem), e);
    }
}</code></pre></div></div></td></tr><tr><td><a href="bab315e3-4714-e1bb-51d6-390a460f2cfe.htm">Err<span id="LSTF36F471D_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Err with the given <span class="parameter">errorMessage</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;double&gt; Divide(double number, double divider)
{
    if (divider == 0)
        return Err&lt;double&gt;("Cannot divide to zero");
    else
        return Ok(number / divider);
}</code></pre></div></div></td></tr><tr><td><a href="b91b68f7-d569-e2a2-6e61-18847f6bf061.htm">Err<span id="LSTF36F471D_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Err with the given <span class="parameter">errorMessage</span> which is observed during <span class="parameter">when</span>.
            </td></tr><tr><td><a href="bfb25ea2-2b36-7ce4-0d47-e02544c64fcd.htm">ErrIf</a></td><td>
            Creates a result as Err variant if the <span class="parameter">errorCondition</span> holds.
            Otherwise, it will return Ok.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateInput(Form form)
{
    return ErrIf(form.HasEmptyFields())
        .ErrIf(form.Date &gt; DateTime.Now)
        // chained validation calls
        .OkIf(repo.AlreadyContains(form.Id));
}</code></pre></div></div></td></tr><tr><td><a href="2c62d921-5817-6a05-d5d4-65a93946d88f.htm">FirstOkOrErr<span id="LSTF36F471D_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the first Ok(value) from the <span class="parameter">collection</span>; or Err if all elements are Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Ip&gt; TryGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();      // List&lt;Request&gt;
var firstIp = requests.Select(r =&gt; TryGetIp(r)) // IEnumerable&lt;Res&lt;Ip&gt;&gt;
                .FirstOkOrErr();                // Res&lt;Ip&gt;

// here, firstIp is:
// * Err if none of the requests provide an Ok(ip);
// * Ok(ip) of the first request for which TryGetIp returns Ok.</code></pre></div></div></td></tr><tr><td><a href="a7b1e40c-d626-484c-4fc1-971b9266f52a.htm">FirstOrNone<span id="LSTF36F471D_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns Some of the first element of the <span class="parameter">collection</span> if it is non-empty; None otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Array.Empty&lt;Title&gt;().FirstOrNone().IsNone);
Assert((new int[2] { 1, 2 }).FirstOrNone() == Some(1));</code></pre></div></div></td></tr><tr><td><a href="17769047-3355-4009-e69e-864321e62233.htm">FirstOrNone<span id="LSTF36F471D_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTF36F471D_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Boolean<span id="LSTF36F471D_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns Some of the first element of the <span class="parameter">collection</span> satisfying the <span class="parameter">filter</span> if any; None otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Array.Empty&lt;int&gt;().FirstOrNone(x =&gt; x &gt; 2).IsNone);
Assert((new int[2] { 1, 2 }).FirstOrNone(x =&gt; x &gt; 2).IsNone);
Assert((new int[2] { 1, 2 }).FirstOrNone(x =&gt; x &gt; 1) == Some(2));</code></pre></div></div></td></tr><tr><td><a href="0af2e6c4-6bfb-3d67-fbd8-7d205ea13514.htm">FirstSomeOrNone<span id="LSTF36F471D_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the first Some(value) from the <span class="parameter">collection</span>; or None if all elements are None.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;Ip&gt; MaybeGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();          // List&lt;Request&gt;
var firstIp = requests.Select(r =&gt; MaybeGetIp(r))   // IEnumerable&lt;Opt&lt;Ip&gt;&gt;
                .FirstSomeOrNone();                 // Opt&lt;Ip&gt;

// here, firstIp is:
// * None if none of the requests provides Some(ip);
// * Some(ip) of the first request for which MaybeGetIp returns Some.</code></pre></div></div></td></tr><tr><td><a href="c552eb84-d5ed-4342-ba5a-17a62938d6ea.htm">Flatten(Res<span id="LSTF36F471D_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Flattens the result of result; i.e., Res&lt;Res&gt; -&gt; Res, by mapping:
            <ul><li>Err =&gt; Err,</li><li>Ok(Err) =&gt; Err,</li><li>Ok(Ok) =&gt; Ok.</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;Res&gt; nestedResult = Err&lt;Res&gt;("msg");
Res result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&gt; nestedResult = Ok(Err("msg"));
Res result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&gt; nestedResult = Ok(Ok());
Res result = nestedResult.Flatten();
Assert(result.IsOk);</code></pre></div></div></td></tr><tr><td><a href="d1d113c9-fd9b-4cf6-a09b-9f290a3b3f74.htm">Flatten<span id="LSTF36F471D_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Opt<span id="LSTF36F471D_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Opt<span id="LSTF36F471D_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Flattens the option of option of <span class="parameter">T</span>.
            Maps Opt&lt;Opt&lt;T&gt;&gt; to Opt&lt;T&gt; as follows:
            <ul><li>None =&gt; None&lt;T&gt;(),</li><li>Some(None&lt;T&gt;()) =&gt; None&lt;T&gt;(),</li><li>Some(Some(T)) =&gt; Some(T).</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(None&lt;Opt&lt;char&gt;&gt;().Flatten() == None&lt;char&gt;());
Assert(Some(None&lt;char&gt;()).Flatten() == None&lt;char&gt;());
Assert(Some(Some('c')).Flatten() == Some('c'));</code></pre></div></div></td></tr><tr><td><a href="84846b15-d9df-f9e7-4521-495c63af126e.htm">Flatten<span id="LSTF36F471D_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Res<span id="LSTF36F471D_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Flattens the result of result of <span class="parameter">T</span>; i.e., Res&lt;Res&lt;T&gt;&gt; -&gt; Res&lt;T&gt;, by mapping:
            <ul><li>Err =&gt; Err,</li><li>Ok(Err) =&gt; Err,</li><li>Ok(Ok(value)) =&gt; Ok(value).</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;Res&lt;int&gt;&gt; nestedResult = Err&lt;Res&lt;int&gt;&gt;("msg");
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&lt;int&gt;&gt; nestedResult = Ok(Err&lt;int&gt;("msg"));
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&lt;int&gt;&gt; nestedResult = Ok(Ok(42));
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsOk and result.Unwrap() == 42);</code></pre></div></div></td></tr><tr><td><a href="ffb1747a-14a4-e034-082f-7690e2379c27.htm">GetOpt<span id="LSTF36F471D_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>K, V<span id="LSTF36F471D_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td> </td></tr><tr><td><a href="d95cb0ed-9d28-0b0d-fba5-e5ea57bbe549.htm">LastOrNone<span id="LSTF36F471D_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns Some of the last element of the <span class="parameter">collection</span> if it is non-empty; None otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Array.Empty&lt;Title&gt;().FirstOrNone().IsNone);
Assert((new int[2] { 1, 2 }).LastOrNone() == Some(2));</code></pre></div></div></td></tr><tr><td><a href="d342369e-25a7-cf71-fd83-dcba2881dd52.htm">LastOrNone<span id="LSTF36F471D_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTF36F471D_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Boolean<span id="LSTF36F471D_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns Some of the last element of the <span class="parameter">collection</span> satisfying the <span class="parameter">filter</span> if any; None otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Array.Empty&lt;int&gt;().LastOrNone(x =&gt; x &gt; 2).IsNone);
Assert((new int[2] { 2, 1 }).LastOrNone(x =&gt; x &gt; 2).IsNone);
Assert((new int[2] { 2, 1 }).LastOrNone(x =&gt; x &gt; 1) == Some(2));</code></pre></div></div></td></tr><tr><td><a href="d8a4b66e-0606-8c2b-32b5-c2d68c69fa85.htm">None<span id="LSTF36F471D_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates an option of <span class="parameter">T</span> as None variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var noneInt = None&lt;int&gt;();
Assert(noneInt.IsNone);

// also:
Opt&lt;string&gt; name = default;
Assert(name.IsNone);</code></pre></div></div></td></tr><tr><td><a href="aec8565d-e80a-ca7a-cd93-9dd9ee572f4c.htm">Ok<span id="LSTF36F471D_46" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Creates a result as the Ok variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = Ok();
Assert(result.IsOk);</code></pre></div></div></td></tr><tr><td><a href="67a55bb9-6405-223d-a092-b6817ee01a7f.htm">Ok<span id="LSTF36F471D_47" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_48" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;double&gt; number = Ok(42.5);
Assert(number.IsOk and number.Unwrap() == 42.5);

// on the other hand:
string name = null;
Res&lt;string&gt; optName = Ok(name);
Assert(optName.IsErr);</code></pre></div></div></td></tr><tr><td><a href="899eeb52-2d24-e3fa-4470-13bb7f54b59f.htm">OkIf(Boolean, String)</a></td><td>
            Creates a result as Ok variant if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateInput(Form form)
{
    return OkIf(!form.HasEmptyFields())
        .OkIf(form.Date &lt;= DateTime.Now)
        // chained validation calls
        .OkIf(repo.AlreadyContains(form.Id));
}</code></pre></div></div></td></tr><tr><td><a href="bb031467-3c3a-9018-377c-553abf4b1729.htm">OkIf<span id="LSTF36F471D_49" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_50" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, T, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">value</span> if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Shape shape = GetShape(); // valid only if shape has a positive base area.
Res&lt;Shape&gt; resultShape = OkIf(shape.GetBaseArea() &gt; 0, shape);</code></pre></div></div></td></tr><tr><td><a href="89c520a6-8fa8-b906-41ae-47603acf9d76.htm">OkIf<span id="LSTF36F471D_51" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_52" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, Func<span id="LSTF36F471D_53" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_54" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">lazyGetValue</span>() if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            Note that the <span class="parameter">lazyGetValue</span> is only evaluated if the <span class="parameter">okCondition</span> holds.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser();
// create a database connection (expensive) only if the user IsOk.
Res&lt;Conn&gt; conn = OkIf(user.IsOk, () =&gt; CreateDatabaseConnection());</code></pre></div></div></td></tr><tr><td><a href="8ed2beb6-6a4a-9719-4985-98fe3b978fbb.htm">ParseBoolOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="9ca3372c-23c0-fe38-4fa4-7f59df41f6ed.htm">ParseBoolOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="02876702-69a1-de74-f4b4-53ed8ce6caf9.htm">ParseBoolOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="652c68a9-94d7-f86c-f22e-ba19a7b3027d.htm">ParseBoolOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="7be82b99-fc9c-2808-d462-169b2cb4f7a1.htm">ParseDateOnlyOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="f7359d54-9681-0b75-66cd-a0ca3f5191a8.htm">ParseDateOnlyOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="1b60010c-90a9-9795-2602-7f22ec75104a.htm">ParseDateOnlyOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="9470b4f7-6e88-6263-ae2e-e839a7ee624a.htm">ParseDateOnlyOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="9fce0bdd-5bd1-21d1-1350-f85b86ce9f63.htm">ParseDateTimeOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="fd8a5639-9cfb-04d7-8664-d62efb80e4c4.htm">ParseDateTimeOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="36763c9b-e7e6-ffb2-f63a-cd980360304c.htm">ParseDateTimeOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="8f370185-25b6-df83-8b67-4b09910539f2.htm">ParseDateTimeOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="6dc1a9b9-ccdf-cb19-4ad5-4ed0be83848b.htm">ParseDoubleOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="7782d43d-e5c6-56dd-9118-74e5e9432356.htm">ParseDoubleOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="a8068426-10a6-6575-4c11-a98835434a2e.htm">ParseDoubleOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="1f642fb3-c310-bd55-d05f-fc4aa983972e.htm">ParseDoubleOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="13b0aa3e-f751-4884-1d05-658b91371655.htm">ParseFloatOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="4618d73c-d307-cc8f-5e7b-ebb5e8eed623.htm">ParseFloatOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="b9481723-74e7-b430-dd3c-3b4309991d4c.htm">ParseFloatOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="7315c390-325d-ddba-2a97-9fb9338da995.htm">ParseFloatOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="0095facf-e249-b552-fe9c-6b0c56462b72.htm">ParseHalfOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="c073eadd-a50e-9a32-053b-74aa03820a45.htm">ParseHalfOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="c3df0acb-a7a6-866a-32aa-6f3807368fd9.htm">ParseHalfOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="3da37497-bb24-7c1c-27a9-43ee70f74947.htm">ParseHalfOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="b36caa6d-7fb0-751d-ee41-e4550e8385e5.htm">ParseIntOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="99366ac4-5041-14da-a164-a786a0d7355b.htm">ParseIntOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="d4e28746-2991-23d1-4a54-81b23189937b.htm">ParseIntOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="d913bab3-1a5e-64ff-7199-f305bfb048cb.htm">ParseIntOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="60491a25-3ca6-182d-823e-b94e366505d8.htm">ParseLongOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="d02b6bbd-e8a0-1104-2a0d-2026d69b7187.htm">ParseLongOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="fd9c4007-2f52-c411-de2b-94de53dd3a85.htm">ParseLongOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="9719859c-8473-b4fe-f725-5946de4bcafd.htm">ParseLongOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="c8643ab2-08ca-2d1d-817e-c3fad52fd271.htm">ParseShortOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="e44d2f64-2344-4542-6979-b3e62bcc0fb0.htm">ParseShortOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="7eb347fd-bb18-74e7-02c0-c4ac1f8bd8d6.htm">ParseShortOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="4d3f4e83-26bb-2455-2624-b68852aa7e0c.htm">ParseShortOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="c5fad96b-2f64-7826-ca14-39d483b6a9c4.htm">ParseTimeOnlyOrErr(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="68a6ea93-129c-4bf9-1be3-a38530ce2a20.htm">ParseTimeOnlyOrErr(String)</a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> if succeeds; Err if fails.
            </td></tr><tr><td><a href="7498e485-f6a6-47dd-3104-7969fd7298ae.htm">ParseTimeOnlyOrNone(ReadOnlySpan)</a></td><td> </td></tr><tr><td><a href="b5325a98-e27a-4d76-c763-41865f62e68b.htm">ParseTimeOnlyOrNone(String)</a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> if succeeds; None if fails.
            </td></tr><tr><td><a href="c4e6c6ac-9fa1-54e4-2546-5906a0f7f0d9.htm">Reduce(IEnumerable<span id="LSTF36F471D_55" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_56" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Boolean)</a></td><td>
            Reduces the collection of results into a single result; returns
            <ul><li>Ok if all items are Ok;</li><li>Err with the error message of the first (all) error(s) if <span class="parameter">stopAtFirstError</span> is true (false) if there exist at least one error.</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateUser(User user) { .. }

List&lt;User&gt; users = GetUsers();
var validation = users.Select(u =&gt; ValidateUser(u)).Reduce();
// will be Ok if all users are valid; first Err otherwise.</code></pre></div></div></td></tr><tr><td><a href="f201c507-c978-27c0-ad07-a14ee80ad688.htm">Reduce<span id="LSTF36F471D_57" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_58" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_59" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_62" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTF36F471D_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, T, T<span id="LSTF36F471D_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Reduces the underlying values of the <span class="parameter">collection</span> by transformation defined by <span class="parameter">funReduce</span> starting from <span class="parameter">initialValue</span>.
            Result is Ok of the reduced value only if all elements of the collection are Ok; Err otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;double&gt; TryGetScore(Player player) { .. }

var players = GetPlayers();                         // Player[]
var scores = players.Select(p =&gt; TryGetScore(p));   // IEnumerable&lt;Res&lt;double&gt;&gt;
var totalScore = scores.Reduce((a, b) =&gt; a + b);    // Res&lt;double&gt;

// here, totalScore is the sum of all unwrapped scores if all scores are Ok;
// the first Err otherwise.</code></pre></div></div></td></tr><tr><td><a href="237efa63-6ea0-9091-6e30-f9b8b8689e06.htm">Reduce<span id="LSTF36F471D_65" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, U<span id="LSTF36F471D_66" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_67" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_68" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_69" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_70" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTF36F471D_71" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>U, T, U<span id="LSTF36F471D_72" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, U)</a></td><td>
            Reduces the underlying values of the <span class="parameter">collection</span> by transformation defined by <span class="parameter">funReduce</span> starting from <span class="parameter">initialValue</span>.
            Result is Ok of the reduced value only if all elements of the collection are Ok; Err otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;double&gt; TryGetScore(Player player) { .. }

var players = GetPlayers();                         // Player[]
var scores = players.Select(p =&gt; TryGetScore(p));   // IEnumerable&lt;Res&lt;double&gt;&gt;
var totalScore = scores.Reduce((a, b) =&gt; a + b, 0); // Res&lt;double&gt;

// here, totalScore is the sum of all unwrapped scores if all scores are Ok;
// the first Err otherwise.</code></pre></div></div></td></tr><tr><td><a href="12a573cb-72d2-3fa2-50d5-6df25d60d08c.htm">ReduceResults</a></td><td>
            Reduces the collection of results into a single result; returns
            <ul><li>Ok if all items are Ok;</li><li>Err with the error message of the first error otherwise.</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res dbConn = CheckDbConnection();
Res validUser = ValidateUser(user);
Res result = ReduceResults(dbConn, validUser);</code></pre></div></div></td></tr><tr><td><a href="f888eb77-7b70-0488-2c66-ca7db30da4e7.htm">Some<span id="LSTF36F471D_73" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_74" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates an option of <span class="parameter">T</span> as Some variant with the given <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into None.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Opt&lt;double&gt; number = Some(42.5);
Assert(number.IsSome and number.Unwrap() == 42.5);

// on the other hand:
string name = null;
Opt&lt;string&gt; optName = Some(name);
Assert(optName.IsNone);</code></pre></div></div></td></tr><tr><td><a href="47f93642-2f7a-1e7e-4652-861588115d53.htm">SomeIf<span id="LSTF36F471D_75" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_76" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates a result of <span class="parameter">T</span> as Some variant with value <span class="parameter">value</span> if the <span class="parameter">someCondition</span> holds.
            Otherwise, it will return the None variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">string team = "secret";
int score = 42;

Opt&lt;string&gt; winner = SomeIf(score &gt; 30, team);
Assert(winner == Some(team));

Opt&lt;string&gt; loser = SomeIf(score &lt; 40, team);
Assert(loser.IsNone);</code></pre></div></div></td></tr><tr><td><a href="a06e9129-9c76-949d-742c-1a23726e6ae6.htm">TryParseOrErr<span id="LSTF36F471D_77" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_78" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns Ok of parsed value from <span class="parameter">text</span> using the <span class="parameter">parser</span> if succeeds; Err if fails.
            Parser is called within a try-catch block, where exceptions are mapped to Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Wizard ParseWizard(text)
{
    string[] columns = text.Split(',');
    string name = columns[0];               // this line might throw due to bad input
    int nbSpells = int.Parse(columns[1]);   // this line might throw as well.
    return new Wizard(name, nbSpells);
}
var solmyr = "solmyr,42".TryParseOrErr(ParseWizard);        // valid input
Assert(solmyr.IsOk and solmyr.Unwrap().NbSpells == 42);

var errWizard = "wronginput".TryParseOrErr(ParseWizard);    // would've thrown, but TryParseOrErr handles the exception
Assert(errWizard.IsErr);</code></pre></div></div></td></tr><tr><td><a href="9c146a90-67db-ec2c-0d49-ba70a5c26a62.htm">TryParseOrNone<span id="LSTF36F471D_79" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_80" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns Some of parsed value from <span class="parameter">text</span> using the <span class="parameter">parser</span> if succeeds; None if fails.
            Parser is called within a try-catch block, where exceptions are mapped to None.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Wizard ParseWizard(text)
{
    string[] columns = text.Split(',');
    string name = columns[0];               // this line might throw due to bad input
    int nbSpells = int.Parse(columns[1]);   // this line might throw as well.
    return new Wizard(name, nbSpells);
}
var solmyr = "solmyr,42".TryParseOrNone(ParseWizard);       // valid input
Assert(solmyr.IsSome and solmyr.Unwrap().NbSpells == 42);

var errWizard = "wronginput".TryParseOrNone(ParseWizard);   // would've thrown, but TryParseOrNone handles the exception
Assert(errWizard.IsNone);</code></pre></div></div></td></tr><tr><td><a href="594280e8-fcdf-9db7-cb0e-deb92e3a0dbd.htm">TryUnwrap<span id="LSTF36F471D_81" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_82" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_83" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Opt<span id="LSTF36F471D_84" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_85" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_86" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Converts <span class="parameter">collection</span> of results into Res of collection of the underlying values.
            Result will be Ok if all elements are Ok; the first Err otherwise.
            Maps IEnumerable&lt;Opt&lt;T&gt;&gt; =&gt; Opt&lt;IEnumerable&lt;T&gt;&gt;.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;Ip&gt; MaybeGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();
var ips = requests                          // List&lt;Request&gt;
    .Select(r =&gt; MaybeGetIp(r))             // IEnumerable&lt;Opt&lt;Ip&gt;&gt;
    .TryUnwrap();                           // Opt&lt;IEnumerable&lt;Ip&gt;&gt;

// If requests.Select(r =&gt; MaybeGetIp(r)) yields to [ Some(ip1), None, Some(ip2), None ].
// Then, resulting ips is None.

// If requests.Select(r =&gt; MaybeGetIp(r)) yields to [ Some(ip1), Some(ip2), Some(ip3) ].
// Then, resulting ips is Some([ ip1, ip2, ip3 ]).</code></pre></div></div></td></tr><tr><td><a href="400e3b6c-1d9c-38c1-456a-9565595135fa.htm">TryUnwrap<span id="LSTF36F471D_87" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_88" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTF36F471D_89" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTF36F471D_90" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_91" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTF36F471D_92" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Converts <span class="parameter">collection</span> of results into Res of collection of the underlying values.
            Result will be Ok if all elements are Ok; the first Err otherwise.
            Maps IEnumerable&lt;Res&lt;T&gt;&gt; =&gt; Res&lt;IEnumerable&lt;T&gt;&gt;.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Ip&gt; TryGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();
var ips = requests                          // List&lt;Request&gt;
    .Select(r =&gt; TryGetIp(r))               // IEnumerable&lt;Res&lt;Ip&gt;&gt;
    .TryUnwrap();                           // Res&lt;IEnumerable&lt;Ip&gt;&gt;

// If requests.Select(r =&gt; MaybeGetIp(r)) yields to [ Ok(ip1), Err, Ok(ip2), Err ].
// Then, resulting ips is the first Err observed in the collection.

// If requests.Select(r =&gt; MaybeGetIp(r)) yields to [ Ok(ip1), Ok(ip2), Ok(ip3) ].
// Then, resulting ips is Ok([ ip1, ip2, ip3 ]).</code></pre></div></div></td></tr><tr><td><a href="ce5038c6-8db6-c2d2-ee8c-a3bf9bdf77d2.htm">UnwrapOkays<span id="LSTF36F471D_93" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_94" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns a collection of underlying values from the results in the <span class="parameter">collection</span>, skipping Err elements.
            Shorthand for collection.Where(x =&gt; x.IsOk).Select(x =&gt; x.Unwrap()).
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Ip&gt; TryGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();
Ip[] ips = requests                         // List&lt;Request&gt;
    .Select(r =&gt; TryGetIp(r))               // IEnumerable&lt;Res&lt;Ip&gt;&gt;
    .UnwrapOkays()                          // IEnumerable&lt;Ip&gt;
    .ToArray();                             // Ip[]

// Assume requests.Select(r =&gt; TryGetIp(r)) yields to [ Ok(ip1), Err, Err, Ok(ip2), Err ].
// Then, resulting ips is [ ip1, ip2 ].</code></pre></div></div></td></tr><tr><td><a href="dae1dc32-cac2-fd7a-00d1-b868b35bc90b.htm">UnwrapSomes<span id="LSTF36F471D_95" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTF36F471D_96" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns a collection of underlying values from the optionals in the <span class="parameter">collection</span>, skipping None elements.
            Shorthand for collection.Where(x =&gt; x.IsSome).Select(x =&gt; x.Unwrap()).
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Opt&lt;Ip&gt; MaybeGetIp(Request request) { .. }

List&lt;Request&gt; requests = GetRequests();
Ip[] ips = requests                         // List&lt;Request&gt;
    .Select(r =&gt; MaybeGetIp(r))             // IEnumerable&lt;Opt&lt;Ip&gt;&gt;
    .UnwrapSomes()                          // IEnumerable&lt;Ip&gt;
    .ToArray();                             // Ip[]

// Assume requests.Select(r =&gt; MaybeGetIp(r)) yields to [ Some(ip1), None, None, Some(ip2), None ].
// Then, resulting ips is [ ip1, ip2 ].</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="9dbb6989-bdfb-5c0a-a52e-0d0ce2d4e01a.htm">OptRes Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>