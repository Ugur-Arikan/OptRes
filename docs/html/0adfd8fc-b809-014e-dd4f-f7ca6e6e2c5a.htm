<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Res&lt;T&gt; Structure</title><meta name="Title" content="Res&lt;T&gt;" /><meta name="Help.Id" content="T:OptRes.Res`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="OptRes" /><meta name="guid" content="0adfd8fc-b809-014e-dd4f-f7ca6e6e2c5a" /><meta name="Description" content="Result type which can be either of the two variants: Ok(value-of-) or Err(error-message)." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">OptRes: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Res<span id="LST8168851_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST8168851_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Structure</h1><div class="summary">
            Result type which can be either of the two variants: Ok(value-of-<span class="parameter">T</span>) or Err(error-message).
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="9dbb6989-bdfb-5c0a-a52e-0d0ce2d4e01a.htm">OptRes</a><br /><strong>Assembly:</strong> OptRes (in OptRes.dll) Version: 6.1.2<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">Res</span>&lt;T&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Res<span id="LST8168851_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST8168851_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd /></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="d18d8cc6-4223-6955-59aa-e7bd7e66fe33.htm">Res<span id="LST8168851_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST8168851_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Result type which can either be Ok(value) or Err.
            Parameterless ctor returns Err; better use <a href="67a55bb9-6405-223d-a092-b6817ee01a7f.htm">Ok<span id="LST8168851_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T)</a> or <a href="bab315e3-4714-e1bb-51d6-390a460f2cfe.htm">Err<span id="LST8168851_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String)</a> to construct results by adding `using static OptRes.Ext`.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDXFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="f3b8ae11-8ee5-3e3b-6bae-1a298088147a.htm">IsErr</a></td><td>
            True if the result is Err; false otherwise.
            </td></tr><tr><td><a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a></td><td>
            True if the result is Ok; false otherwise.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDBFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="51a5bf9f-6d6a-8c2d-c4f8-d365a0414d25.htm">Do</a></td><td>
            Runs <span class="parameter">action</span>(Unwrap()) only if IsOk; and returns itself back.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// the logging call will only be made if the result of TryGetUser is Ok of a user.
// Since Do returns back the result, it can still be assigned to var 'user'.
Res&lt;User&gt; user = TryGetUser().Do(u =&gt; Log.Info($"User '{u.Name}' grabbed"));</code></pre></div></div></td></tr><tr><td><a href="8cd8cfcc-64fa-169c-f667-eb2878b8ba3b.htm">DoIfErr</a></td><td>
            Runs <span class="parameter">actionOnErr</span>() only if IsErr; and returns itself back.
            Counterpart of <a href="51a5bf9f-6d6a-8c2d-c4f8-d365a0414d25.htm">Do(Action<span id="LST8168851_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> for the Err variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// the logging call will only be made if the result of TryGetUser is Err.
// Since DoIfErr returns back the result, it can still be assigned to var 'user'.
Res&lt;User&gt; user = TryGetUser().DoIfErr(err =&gt; Log.Warning($"User could not be read. {err}"));</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="a146280a-bf24-18fb-951b-e25895ec6e08.htm">ErrorMessage</a></td><td>
            Returns Some(error-message) if IsErr; None&lt;string&gt;() if IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var user = Err&lt;User&gt;("failed to get user");
Assert(user.ErrorMessage() == Some("failed to get user"));</code></pre></div></div></td></tr><tr><td><a href="73d5e0a7-93f2-3c9f-d1c6-54563c15dd2c.htm">FlatMap(Func<span id="LST8168851_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Res<span id="LST8168851_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the error when IsErr; <span class="parameter">map</span>(Unwrap()) when IsOk flattenning the result.
            Shorthand combining Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Team&gt; TryGetTeam() { .. } // tries to grab a team; might fail, hence, returns Res.
static Res TryPutTeam(Team team) { .. } // tries to put the team; might fail, hence, returns Res.

var result = TryGetTeam().FlatMap(TryPutTeam);
// equivalently:
var result = TryGetTeam().FlatMap(team =&gt; TryPutTeam(team));

// this is a shorthand for:
var result = TryGetTeam()   // Res&lt;Team&gt;
    .Map(TryPutTeam)        // Res&lt;Res&gt;
    .Flatten();             // Res</code></pre></div></div></td></tr><tr><td><a href="ccd64a64-954d-a0a9-4484-8c58d755ff47.htm">FlatMap<span id="LST8168851_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST8168851_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST8168851_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Res<span id="LST8168851_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST8168851_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST8168851_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns None when IsNone; <span class="parameter">map</span>(val) when IsOk flattening the result.
            Shorthand combining Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; TryGetUser() {
    // method that tries to get the user, return Ok(user) or Err.
}
static Res&lt; double&gt; TryGetBalance(User user) {
    // method that tries to get usedr's balance; which might fail, returns:
    // Ok(balance) or Err
}
Res&lt;double&gt; balance = TryGetUser().FlatMap(TryGetBalance);
// equivalent to both below:
var balance = TryGetUser().FlatMap(user =&gt; TryGetBalance(user));
var balance = TryGetUser()              // Res&lt;User&gt;
    .Map(user =&gt; TryGetBalance(user))   // Res&lt;Res&gt;
    .Flatten();                         // Res</code></pre></div></div></td></tr><tr><td><a href="962bf332-47bc-fbdd-f744-359d40227425.htm">FlatMapAppend<span id="LST8168851_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T2<span id="LST8168851_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Just returns back the Err when IsErr.
            Extends the value with <span class="parameter">getNextResult</span>(Unwrap()).Flatten() when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Person&gt; TryGetPerson() { .. }
static Res&lt;Session&gt; TryGetSession(Person person) { .. }

var personSession =
    TryGetPerson()                          // Res&lt;Person&gt;
    .FlatMapAppend(p =&gt; TryGetSession(p));  // Res&lt;(Person, Session)&gt;

// equivalent to:
var personSession =
    TryGetPerson()
    .MapAppend(p =&gt; TryGetSession(p).Flatten());

// here personSession is:
// * Err if TryGetPerson returns Err, here TryGetSession will not be called,
// * Err if TryGetSession returns Err,
// * Ok((person, session)) if TryGetPerson returns Ok(person), and TryGetSession(person) returns Ok(session).</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="fb83d750-d300-4cd8-3dbd-b73e11a2f97e.htm">IntoOpt</a></td><td>
            Converts Res&lt;T&gt; to Opt&lt;T&gt;, by mapping:
            <ul><li>Ok(val) to Some(val),</li><li>Err to None.</li></ul></td></tr><tr><td><a href="13312f92-9882-1945-5253-14c7bbc5afd0.htm">Map<span id="LST8168851_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST8168851_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the Err back when IsErr; Ok(<span class="parameter">map</span>(Unwrap())) when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// session will be Err if the user is Err; Ok of a session for the user when Ok.
Res&lt;Session&gt; session = TryGetUser.Map(user =&gt; NewSession(user.Secrets));</code></pre></div></div></td></tr><tr><td><a href="dae63783-95fb-7d5a-83b6-50b04b3fd92e.htm">MapAppend<span id="LST8168851_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T2<span id="LST8168851_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Just returns back the Err when IsErr.
            Extends the value with <span class="parameter">getNextResult</span>(Unwrap()) when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Person&gt; TryGetPerson() { .. }
static Session GetSession(Person person) { .. }

var personSession =
    TryGetPerson()                      // Res&lt;Person&gt;
    .MapAppend(p =&gt; GetSession(p));     // Res&lt;(Person, Session)&gt;

// here personSession is:
// * Err if TryGetPerson returns Err, here GetSession will not be called,
// * Ok((person, GetSession(person))) if TryGetPerson returns Ok(person).</code></pre></div></div></td></tr><tr><td><a href="9e83f726-967c-4940-fe58-6d96b726c515.htm">Match<span id="LST8168851_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST8168851_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Maps into <span class="parameter">whenOk</span>(Unwrap()) whenever IsOk; and into <span class="parameter">whenErr</span>(error-message) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser(..);
string greeting = user.Match(u =&gt; $"Welcome back {u.Name}", err =&gt; $"Failed to get user. {err}");
// equivalently:
greeting = user.Match(
    whenOk: u =&gt; $"Welcome back {u.Name}",
    whenErr: err =&gt; $"Failed to get user. {err}"
);</code></pre></div></div></td></tr><tr><td><a href="0f11b633-e338-e29f-73e1-e8ceb9bcd00f.htm">MatchDo</a></td><td>
            Executes <span class="parameter">whenOk</span>(Unwrap()) if IsOk; <span class="parameter">whenErr</span>(error-message) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = LoginUser(..);
user.MatchDo(
    whenOk: u =&gt; Log.Info($"Logged in user: {u.Name}"),
    whenErr: err =&gt; Log.Error($"Failed login. ${err}")
);</code></pre></div></div></td></tr><tr><td><a href="15033d98-da45-12c0-69d7-5b2e51259415.htm">OkIf</a></td><td>
            Returns back the Err if this is Err.
            Otherwise, returns Ok(value) if <span class="parameter">condition</span>(value) holds; Err if it does not hold.
            Especially useful in fluent input validation.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;Account&gt; TryParseAccount(..) { }
static bool IsAccountNumberValid(int number) { }
static bool DoesAccountExist(string code) { }

var account = TryParseAccount(..)
                .OkIf(acc =&gt; IsAccountNumberValid(acc.Number))
                .OkIf(acc =&gt; DoesAccountExist(acc.Code));
// account will be Ok(account) only if:
// - TryParseAccount returns Ok(account), and further,
// - both IsAccountNumberValid and DoesAccountExist validation checks return true.</code></pre></div></div></td></tr><tr><td><a href="8cc7a019-5ac6-9ab7-048d-691c192b8df8.htm">ThrowIfErr</a></td><td>
            Returns the result back when <a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a>; throws when <a href="f3b8ae11-8ee5-3e3b-6bae-1a298088147a.htm">IsErr</a>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; QueryUser(..) {
    // might fail; hence, returns a Res&lt;User&gt; rather than just User.
}
var result = QueryUser(..).ThrowIfErr();
// result will be:
// - Ok(user) if QueryUser succeeds and returns Ok of the user;
// - the application will throw otherwise.</code></pre></div></div></td></tr><tr><td><a href="1857f7db-46e2-6ebf-ebb0-5fd462e0ee01.htm">ToString</a></td><td>
            String representation.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LST8168851_28" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST8168851_29" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="5e199199-7e76-970d-e76e-78d426e71b1a.htm">Try</a></td><td>
             When IsOk executes <span class="parameter">action</span>(val) in a try-catch block: returns back itself if the process succeeds; Err if it throws.
             Does not do anything and returns back itself when IsErr.
             <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; TryGetUser() { .. }
static void PutUserToDb(User user) {
    // method that writes the user to a database table
    // might fail and throw!
}

Res&lt;User&gt; user = TryGetUser().Try(PutUserToDb);
// equivalently:
Res&lt;User&gt; user = TryGetUser().Try(() =&gt; PutUserToDb());

// user will be:
// - Err(called on Err) if () returns Err.
// - Err(relevant error message) if () returns Ok(user) but database action throws an exception.
// - Ok(user) if () returns Ok(user), further the action is operated successfully;

// it provides a shorthand for the following verbose/unpleasant version:
Res&lt;User&gt; user = TryGetUser();
if (user.IsOk)
{
    try
    {
        PutUserToDb(user.Unwrap());
    }
    catch (Exception e)
    {
        user = Err&lt;User&gt;("db-operation failed, check the exception message: " + e.Message);
    }
}</code></pre></div></div></td></tr><tr><td><a href="80ea4825-4ecd-177d-ecc4-5605d1cead80.htm">TryMap<span id="LST8168851_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST8168851_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<span class="parameter">map</span>(val)) in a try-catch block and returns the Err if it throws.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; TryGetUser() { .. }
static long PutUserToDbGetId(User user) {
    // method that writes the user to a database table and returns back the auto-generated id/primary-key
    // might fail and throw!
}

Res&lt;long&gt; id = TryGetUser().TryMap(PutUserToDbGetId);
// equivalently:
Res&lt;long&gt; id = TryGetUser().TryMap(user =&gt; PutUserToDbGetId(user));
// Res&lt;long&gt; id will be:
// - Err(called on Err) when TryGetUser returns Err,
// - Err(relevant error message) when TryGetUser returns Ok(user) but the database transaction throws an exception,
// - Ok(id) when TryGetUser returns Ok(user), the database transaction succeeds and returns the auto-generated id.

// it provides a shorthand for the following verbose/unpleasant version:
Opt&lt;User&gt; user = TryGetUser();
Res&lt;long&gt; id;
if (user.IsNone)
    id = Err&lt;long&gt;("no user");
else
{
    try
    {
        id = Ok(PutUserToDb(user.Unwrap()));
    }
    catch (Exception e)
    {
        id = Err&lt;long&gt;("db-operation failed, check the exception message: " + e.Message);
    }
}</code></pre></div></div></td></tr><tr><td><a href="c6b0b022-6470-eb37-e28a-032f333cb30b.htm">Unwrap</a></td><td>
            Returns the underlying value when <a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a>; or throws when <a href="f3b8ae11-8ee5-3e3b-6bae-1a298088147a.htm">IsErr</a>.
            Must be called shyly, as it is not necessary to unwrap until the final result is achieved due to Map, FlatMap and TryMap methods.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;int&gt; resultAge = "42".ParseIntOrErr();
if (resultAge.IsSome) {
    int age = resultAge.Unwrap(); // use the uwrapped age
} else { // handle the Err case
}</code></pre></div></div></td></tr><tr><td><a href="332ffcbd-b094-8061-0020-3f69c85b8138.htm">UnwrapOr(Func<span id="LST8168851_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the underlying value when <a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a>; or returns <span class="parameter">lazyFallbackValue</span>() when <a href="f3b8ae11-8ee5-3e3b-6bae-1a298088147a.htm">IsErr</a>.
            This is a safe way to unwrap the result, by explicitly handling the Err variant.
            Use the eager <a href="3a467a01-b0c7-72af-d6f1-8493292184d5.htm">UnwrapOr(T)</a> variant if the fallback value is cheap or readily available.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static string ParseUserTablename(..) { /*parses the table name from command line input; might throw!*/ }
static string QueryUserTablename(..) { /*makes an expensive db-call to find out the table name*/ }

string userTable = Ok()                                         // Res, certainly Ok
                    .TryMap(() =&gt; ParseUserTablename(..))       // Res&lt;string&gt;: might be Err if parser throws
                    .UnwrapOr(() =&gt; QueryUserTablename(..));    // directly returns ParseUserTablename's result if it is Ok;
                                                                // calls QueryUserTablename otherwise and returns its result.</code></pre></div></div></td></tr><tr><td><a href="3a467a01-b0c7-72af-d6f1-8493292184d5.htm">UnwrapOr(T)</a></td><td>
            Returns the underlying value when <a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a>; or returns the <span class="parameter">fallbackValue</span> when <a href="f3b8ae11-8ee5-3e3b-6bae-1a298088147a.htm">IsErr</a>.
            This is a safe way to unwrap the result, by explicitly handling the Err variant.
            Use the lazy <a href="332ffcbd-b094-8061-0020-3f69c85b8138.htm">UnwrapOr(Func<span id="LST8168851_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> variant if the computation of the fallback value is expensive.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Assert(Ok(42).UnwrapOr(7) == 42);
Assert(Err&lt;int&gt;("error-message").UnwrapOr(7) == 7);</code></pre></div></div></td></tr><tr><td><a href="77610a61-2993-6c1a-98bb-a1530f20740c.htm">WithoutVal</a></td><td>
            Converts into <a href="ec9a78db-786a-c07e-f7ea-2ecca9863f58.htm">Res</a> dropping the value if it <a href="7e99ca06-158d-144e-4120-8cf80371e614.htm">IsOk</a>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDMFASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="dc7b25ec-6034-279e-9b94-204d56968561.htm"><span id="LST8168851_36" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(T to Res<span id="LST8168851_37" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST8168851_38" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Implicitly converts to <span class="parameter">value</span> into Ok(<span class="parameter">value</span>).
            Note that it is safe to convert a non-null value to result as Ok(value).
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;int&gt; number = 42;
// is equivalent to:
Res&lt;int&gt; number = Ok(42);</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="9dbb6989-bdfb-5c0a-a52e-0d0ce2d4e01a.htm">OptRes Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>