<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Res Methods</title><meta name="Title" content="Methods" /><meta name="Help.Id" content="Methods.T:OptRes.Res" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="OptRes" /><meta name="guid" content="5c88cc0c-b915-781a-6363-43cfeeb9d5f0" /><meta name="tocFile" content="../toc/IDDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">OptRes: Auto-generated by Sandcastle</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Res Methods</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDADASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="814ec4d8-c46e-c33a-8dc9-a32fc92b2cc7.htm">Do</a></td><td>
            Runs <span class="parameter">action</span>() only if IsOk; and returns itself back.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">User user = CreateUser(/*inputs*/);
Res result = TryPutUserToDb(user).Do(Log.Success("user created"));
// result will be:
// - Ok if TryPutUserToDb succeeds and returns Ok; in this case the success message will be logged; or
// - Err if TryPutUserToDb returns Err; and the success message log will not be called.</code></pre></div></div></td></tr><tr><td><a href="f909fcc9-57cf-daed-5713-0c78358aa26e.htm">DoIfErr(Action)</a></td><td>
            Runs <span class="parameter">action</span>() only if IsErr; and returns itself back.
            This is the counterpart of the <a href="814ec4d8-c46e-c33a-8dc9-a32fc92b2cc7.htm">Do(Action)</a> method.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = RefreshIndices(/*inputs*/).DoIfErr(() =&gt; Alert("database connection failed"));
// result will be:
// - Ok if refreshing db indices succeeded;
// - Err if it failed, in which case the Alert call will be made.</code></pre></div></div></td></tr><tr><td><a href="e96c129f-af2f-2bb2-8fe0-61e40fc860e4.htm">DoIfErr(Action<span id="LST6BCD29A7_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST6BCD29A7_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Runs <span class="parameter">action</span>(error-message) only if IsErr; and returns itself back.
            This is the counterpart of the <a href="814ec4d8-c46e-c33a-8dc9-a32fc92b2cc7.htm">Do(Action)</a> method.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = RefreshIndices(/*inputs*/).DoIfErr(err =&gt;  Alert($"database connection failed: {err}"));
// result will be:
// - Ok if refreshing db indices succeeded;
// - Err if it failed, in which case the Alert call will be made.</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="e46d81e5-4da0-5ef0-9bb9-095ca21933bd.htm">ErrorMessage</a></td><td>
            Returns Some(error-message) if IsErr; None&lt;string&gt;() if IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var result = Err("failed to connect");
Assert(result.ErrorMessage() == Some("failed to connect"));</code></pre></div></div></td></tr><tr><td><a href="4b51dc6f-bd99-4be8-3c2a-881c19f21e71.htm">FlatMap(Func<span id="LST6BCD29A7_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LST6BCD29A7_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res TryLogCompletion() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryLogCompletion);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryLogCompletion());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryLogCompletion()/*Res&lt;Res&gt;*/).Flatten()/*Res*/;</code></pre></div></div></td></tr><tr><td><a href="beaf5431-5f56-afa1-beaa-584cdfd92f22.htm">FlatMap<span id="LST6BCD29A7_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST6BCD29A7_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LST6BCD29A7_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST6BCD29A7_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res&lt;int&gt; TryGetCount() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryGetCount);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryGetCount());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryGetCount()/*Res&lt;Res&lt;int&gt;&gt;*/).Flatten()/*Res&lt;int&gt;*/;</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="898ce191-0360-c4ed-2311-09925aef86dd.htm">Map<span id="LST6BCD29A7_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the error when IsErr; Ok(<span class="parameter">map</span>()) when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res ValidateInputs(Inputs inputs) { /*checks*/ }
Output CalcOutput(Inputs inputs) { /*maps inputs to output*/ }

Inputs inputs = GetInputs();
Res&lt;Output&gt; output = ValidateInputs(inputs).Map(() =&gt; CalcOutput(inputs));
// output will be:
// - Err if ValidateInputs returns Err omitting the call to CalcOutput;
// - Ok(CalcOutput(inputs)) if ValidateInputs returns Ok.</code></pre></div></div></td></tr><tr><td><a href="b4031615-eea9-0a92-f674-d09aa7b05a1a.htm">Match<span id="LST6BCD29A7_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LST6BCD29A7_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST6BCD29A7_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LST6BCD29A7_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Maps into <span class="parameter">whenOk</span>() lazily whenever IsOk; and into <span class="parameter">whenErr</span>(errorMessage) otherwise.
            Similar to <a href="b3aef9fd-c612-66fb-aeec-a20ea5f76579.htm">Match<span id="LST6BCD29A7_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(TOut, Func<span id="LST6BCD29A7_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LST6BCD29A7_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> except that whenOk is lazy and evaluated only when IsOk.
            </td></tr><tr><td><a href="b3aef9fd-c612-66fb-aeec-a20ea5f76579.htm">Match<span id="LST6BCD29A7_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(TOut, Func<span id="LST6BCD29A7_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LST6BCD29A7_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Maps into <span class="parameter">whenOk</span> whenever IsOk; and into <span class="parameter">whenErr</span>(errorMessage) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser(..);
string greetingMessage = user.Match("Welcome", err =&gt; $"Error getting the user: {err}");</code></pre></div></div></td></tr><tr><td><a href="034c2810-d29d-5532-a264-603bbf5ba22a.htm">MatchDo</a></td><td>
            Executes <span class="parameter">whenOk</span>() whenever IsOk; and <span class="parameter">whenErr</span>(errorMessage) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser(..);
user.MatchDo
(
    whenOk: () =&gt; Log.Info("New user login"),
    whenErr: err =&gt; Log.Error($"Failed login. {err}")
);</code></pre></div></div></td></tr><tr><td><a href="810baa17-8748-e566-0800-e62c1bb9f58b.htm">OkIf</a></td><td>
            Returns back the Err if this is Err.
            Otherwise, returns Ok if <span class="parameter">condition</span> holds; Err if it does not hold.
            Especially useful in fluent input validation.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; Login(string username, string passwordHash)
{
    return OkIf(!string.IsNullOrEmpty(username))    // validate username
        .OkIf(!string.IsNullOrEmpty(passwordHash))  // validate password-hash
        .OkIf(userRepo.ContainsKey(username))       // further validate user
        .Map(() =&gt; GetUser(username, password));    // finally map into actual result;
                                                    // any Err in validation steps will directly be mapped to Err, avoiding GetUser call.
}</code></pre></div></div></td></tr><tr><td><a href="c7855225-07e9-34fd-2581-9bc1de13ad08.htm">ThrowIfErr</a></td><td>
            Returns the result back when <a href="7cd285a0-194f-5a0e-8dfd-0b0d1d530ad6.htm">IsOk</a>; throws when <a href="89d2a3a4-ab90-6585-d391-56f3e3fcb0c6.htm">IsErr</a>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res MakeApiCall() {
    // method that makes an api call.
    // might fail; hence, returns a Res rather than void.
}
var result = MakeApiCall().ThrowIfErr();
// result will be:
// - Ok() if MakeApiCall succeeds and returns Ok;
// - the application will throw otherwise.</code></pre></div></div></td></tr><tr><td><a href="6969c48a-6103-2ccc-55f5-4fca9ad22fec.htm">ToString</a></td><td>
            String representation.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LST6BCD29A7_26" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST6BCD29A7_27" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="63cc2cd0-4d85-93a6-2a70-71119acf7d0c.htm">Try</a></td><td>
            When IsOk executes <span class="parameter">action</span>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res TryLogin() { .. }
static void ClearSessionHistory() { /*risky function, might throw!*/ }

var result = TryLogin().Try(ClearSessionHistory);
// the result will be:
// - Err if TryLogin returns Err, in which case ClearSessionHistory is never called;
// - Ok if TryLogin returns Ok; and ClearSessionHistory call succeeds without an exception;
// - Err if TryLogin returns Ok, but ClearSessionHistory throws an exception.</code></pre></div></div></td></tr><tr><td><a href="f1ca463a-fc9c-ed4e-1449-dfd3be771a23.htm">TryMap<span id="LST6BCD29A7_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LST6BCD29A7_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<span class="parameter">map</span>()) in a try-catch block and returns the Err if it throws.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateUser(User user) { /*returns Ok if valid; Err o/w*/ }
static Res&lt;Secret&gt; TryGetSecrets(User user) { /*returns Ok(secrets) if succeds; Err if fails to get secrets*/ }

User user = GetUser(..);
var secrets = ValidateUser(user).TryMap(() =&gt; TryGetSecrets(user));
// TryGetSecrets will be called only if ValidateUser call returns Ok;
// secrets will be Ok of the grabbed secrets if both ValidateUser and TryGetSecrets return Ok.</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="ec9a78db-786a-c07e-f7ea-2ecca9863f58.htm">Res Structure</a></div><div><a href="9dbb6989-bdfb-5c0a-a52e-0d0ce2d4e01a.htm">OptRes Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>